/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package intellij.haskell;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static intellij.haskell.psi.HaskellTypes.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_HaskellLexer.flex</tt>
 */
public class _HaskellLexer implements FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int NCOMMENT = 2;
    public static final int NHADDOCK = 4;
    public static final int QQ = 6;
    public static final int OPTIONS_GHC = 8;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3, 4, 4
    };

    /**
     * Translates characters to character classes
     * Chosen bits are [10, 7, 4]
     * Total runtime size is 3040 bytes
     */
    public static int ZZ_CMAP(int ch) {
        return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 11] << 7) | ((ch >> 4) & 0x7f)] << 4) | (ch & 0xf)];
    }

    /* The ZZ_CMAP_Z table has 544 entries */
    static final char ZZ_CMAP_Z[] = zzUnpackCMap(
            "\1\0\3\1\1\2\65\1\1\3\u01e5\1");

    /* The ZZ_CMAP_Y table has 512 entries */
    static final char ZZ_CMAP_Y[] = zzUnpackCMap(
            "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\56\1\1\12\1\13\1\14\1\15\305" +
                    "\1\1\16\4\1\2\17\7\1\1\20\1\21\1\22\6\1\1\23\3\1\1\24\2\1\1\25\1\26\1\27\1" +
                    "\30\10\27\1\31\3\27\60\1\1\32\144\1\1\33\20\1\1\34\51\1");

    /* The ZZ_CMAP_A table has 464 entries */
    static final char ZZ_CMAP_A[] = zzUnpackCMap(
            "\5\0\1\3\3\0\1\3\1\2\2\3\1\1\22\0\1\42\1\74\1\21\1\4\2\74\1\45\1\73\1\114" +
                    "\1\115\1\74\1\76\1\116\1\31\1\41\1\74\1\34\4\67\3\37\2\27\1\107\1\117\1\100" +
                    "\1\103\1\101\1\102\1\104\1\57\1\62\1\60\1\33\1\43\1\63\1\72\1\54\1\66\1\25" +
                    "\1\61\1\52\1\71\1\50\1\40\1\66\1\56\1\65\1\53\1\55\1\51\1\64\1\25\1\36\1\70" +
                    "\1\25\1\120\1\20\1\44\1\47\1\22\1\121\1\32\1\126\1\16\1\7\1\10\1\6\1\127\1" +
                    "\136\1\5\2\23\1\12\1\134\1\11\1\15\1\133\1\23\1\14\1\13\1\131\1\17\1\46\1" +
                    "\135\1\35\1\132\1\23\1\122\1\105\1\123\1\106\6\0\1\130\12\0\1\3\20\0\31\26" +
                    "\7\0\31\24\16\0\2\130\6\0\12\30\10\0\1\26\22\0\1\26\4\0\1\26\2\0\1\26\6\0" +
                    "\1\26\13\0\1\111\1\0\1\112\17\0\1\113\15\0\1\124\27\125\1\77\36\125\1\110" +
                    "\16\125\1\74\11\125\5\0\1\75\20\0\1\24\20\0\1\24\10\0");

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\5\0\1\1\2\2\1\3\1\4\11\5\1\6\1\7" +
                    "\1\10\1\11\2\12\1\4\1\12\1\13\1\3\1\14" +
                    "\1\4\1\15\3\4\1\16\1\17\1\20\1\21\1\22" +
                    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32" +
                    "\1\33\1\34\1\35\1\36\1\37\3\5\10\40\1\41" +
                    "\2\42\1\43\1\42\1\44\1\45\1\0\6\5\1\46" +
                    "\1\47\3\5\1\50\4\5\1\51\2\5\2\0\1\52" +
                    "\1\0\2\5\1\11\4\0\1\53\5\0\2\22\1\23" +
                    "\3\0\1\54\1\55\4\5\1\56\1\57\1\60\1\61" +
                    "\1\62\3\0\1\63\2\42\1\52\2\42\4\0\20\5" +
                    "\1\64\2\5\20\0\1\5\1\65\1\0\1\65\3\53" +
                    "\1\66\1\67\1\70\21\0\1\71\1\72\4\5\1\0" +
                    "\1\73\16\42\1\70\17\42\1\74\6\0\1\74\15\5" +
                    "\1\75\1\76\2\5\1\77\13\0\1\53\1\0\2\53" +
                    "\15\0\1\100\1\101\2\5\27\42\7\0\1\74\3\5" +
                    "\1\102\6\5\1\103\1\0\2\104\1\0\1\5\1\105" +
                    "\3\0\1\5\1\106\1\107\1\5\1\110\4\5\6\0" +
                    "\1\111\1\0\3\5\1\112\1\5\1\113\6\0\1\5" +
                    "\1\114\1\0\1\115\2\0\1\104\3\0\1\74\1\0" +
                    "\1\74\10\0\1\74\7\0\1\116\5\0\1\117\1\116" +
                    "\2\0\1\53\5\0\1\120\1\121\1\122\4\0";

    private static int[] zzUnpackAction() {
        int[] result = new int[428];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\137\0\276\0\u011d\0\u017c\0\u01db\0\u023a\0\u01db" +
                    "\0\u0299\0\u02f8\0\u0357\0\u03b6\0\u0415\0\u0474\0\u04d3\0\u0532" +
                    "\0\u0591\0\u05f0\0\u064f\0\u06ae\0\u070d\0\u076c\0\u07cb\0\u082a" +
                    "\0\u0889\0\u08e8\0\u0947\0\u01db\0\u09a6\0\u01db\0\u0a05\0\u0a64" +
                    "\0\u0ac3\0\u0b22\0\u0b81\0\u0be0\0\u0a05\0\u0a05\0\u0a05\0\u0c3f" +
                    "\0\u0a05\0\u0a05\0\u0a05\0\u0a05\0\u01db\0\u01db\0\u01db\0\u01db" +
                    "\0\u0c9e\0\u01db\0\u0cfd\0\u01db\0\u01db\0\u0d5c\0\u0dbb\0\u0e1a" +
                    "\0\u01db\0\u0e79\0\u0ed8\0\u0f37\0\u0f96\0\u0ff5\0\u1054\0\u10b3" +
                    "\0\u1112\0\u1171\0\u11d0\0\u1171\0\u122f\0\u1171\0\u01db\0\u128e" +
                    "\0\u12ed\0\u134c\0\u13ab\0\u140a\0\u1469\0\u01db\0\u0591\0\u14c8" +
                    "\0\u1527\0\u1586\0\u15e5\0\u0591\0\u1644\0\u16a3\0\u1702\0\u1761" +
                    "\0\u0591\0\u17c0\0\u181f\0\u187e\0\u070d\0\u01db\0\u18dd\0\u076c" +
                    "\0\u193c\0\u01db\0\u199b\0\u19fa\0\u1a59\0\u0889\0\u1ab8\0\u1b17" +
                    "\0\u1b76\0\u1bd5\0\u1c34\0\u1c93\0\u1cf2\0\u1d51\0\u1d51\0\u1db0" +
                    "\0\u1e0f\0\u0c9e\0\u01db\0\u1e6e\0\u1ecd\0\u1f2c\0\u1f8b\0\u1fea" +
                    "\0\u01db\0\u01db\0\u01db\0\u01db\0\u01db\0\u2049\0\u20a8\0\u10b3" +
                    "\0\u01db\0\u2107\0\u2166\0\u1171\0\u21c5\0\u2224\0\u2283\0\u22e2" +
                    "\0\u2341\0\u23a0\0\u23ff\0\u245e\0\u24bd\0\u251c\0\u257b\0\u25da" +
                    "\0\u2639\0\u2698\0\u26f7\0\u2756\0\u27b5\0\u2814\0\u2873\0\u28d2" +
                    "\0\u2931\0\u2990\0\u0591\0\u29ef\0\u2a4e\0\u2aad\0\u2b0c\0\u2b6b" +
                    "\0\u2bca\0\u2c29\0\u2c88\0\u2ce7\0\u2d46\0\u2da5\0\u2e04\0\u2e63" +
                    "\0\u2ec2\0\u2f21\0\u2f80\0\u2fdf\0\u303e\0\u309d\0\u30fc\0\u30fc" +
                    "\0\u315b\0\u31ba\0\u3219\0\u3278\0\u1b76\0\u1bd5\0\u01db\0\u32d7" +
                    "\0\u3336\0\u3395\0\u33f4\0\u3453\0\u34b2\0\u3511\0\u3570\0\u35cf" +
                    "\0\u362e\0\u368d\0\u36ec\0\u374b\0\u37aa\0\u3809\0\u3868\0\u38c7" +
                    "\0\u01db\0\u01db\0\u3926\0\u3985\0\u39e4\0\u3a43\0\u3aa2\0\u01db" +
                    "\0\u3b01\0\u3b60\0\u3bbf\0\u3c1e\0\u3c7d\0\u3cdc\0\u3d3b\0\u3d9a" +
                    "\0\u3df9\0\u3e58\0\u3eb7\0\u3f16\0\u3f75\0\u3fd4\0\u1171\0\u4033" +
                    "\0\u4092\0\u40f1\0\u4150\0\u41af\0\u420e\0\u426d\0\u42cc\0\u432b" +
                    "\0\u438a\0\u43e9\0\u4448\0\u44a7\0\u4506\0\u4565\0\u45c4\0\u4623" +
                    "\0\u4682\0\u46e1\0\u4740\0\u479f\0\u47fe\0\u485d\0\u48bc\0\u491b" +
                    "\0\u497a\0\u49d9\0\u4a38\0\u4a97\0\u4af6\0\u4b55\0\u4bb4\0\u4c13" +
                    "\0\u4c72\0\u4cd1\0\u4d30\0\u0591\0\u0591\0\u4d8f\0\u4dee\0\u0591" +
                    "\0\u4e4d\0\u4eac\0\u4f0b\0\u4f6a\0\u4fc9\0\u5028\0\u5087\0\u50e6" +
                    "\0\u5145\0\u51a4\0\u5203\0\u5262\0\u52c1\0\u5320\0\u537f\0\u53de" +
                    "\0\u543d\0\u549c\0\u54fb\0\u555a\0\u55b9\0\u5618\0\u5677\0\u56d6" +
                    "\0\u5735\0\u5794\0\u57f3\0\u5852\0\u58b1\0\u0591\0\u5910\0\u596f" +
                    "\0\u59ce\0\u5a2d\0\u5a8c\0\u5aeb\0\u5b4a\0\u5ba9\0\u5c08\0\u5c67" +
                    "\0\u5cc6\0\u5d25\0\u5d84\0\u5de3\0\u5e42\0\u5ea1\0\u5f00\0\u5f5f" +
                    "\0\u5fbe\0\u601d\0\u607c\0\u60db\0\u613a\0\u6199\0\u61f8\0\u6257" +
                    "\0\u62b6\0\u6315\0\u6374\0\u63d3\0\u6432\0\u6491\0\u64f0\0\u654f" +
                    "\0\u65ae\0\u660d\0\u666c\0\u66cb\0\u672a\0\u6789\0\u67e8\0\u6847" +
                    "\0\u68a6\0\u0591\0\u6905\0\u6964\0\u69c3\0\u6a22\0\u6a81\0\u0591" +
                    "\0\u6ae0\0\u6b3f\0\u6b9e\0\u6bfd\0\u0591\0\u0591\0\u6c5c\0\u0591" +
                    "\0\u6cbb\0\u6d1a\0\u6d79\0\u6dd8\0\u6e37\0\u69c3\0\u6e96\0\u6ef5" +
                    "\0\u6f54\0\u6fb3\0\u0591\0\u7012\0\u7071\0\u70d0\0\u712f\0\u0591" +
                    "\0\u718e\0\u0591\0\u71ed\0\u724c\0\u72ab\0\u730a\0\u7369\0\u73c8" +
                    "\0\u7427\0\u0591\0\u7486\0\u0591\0\u74e5\0\u7544\0\u75a3\0\u7602" +
                    "\0\u7661\0\u76c0\0\u771f\0\u777e\0\u77dd\0\u783c\0\u789b\0\u78fa" +
                    "\0\u7959\0\u75a3\0\u79b8\0\u7a17\0\u7a76\0\u7ad5\0\u7b34\0\u7b93" +
                    "\0\u7bf2\0\u7c51\0\u7cb0\0\u7d0f\0\u7d6e\0\u45c4\0\u7dcd\0\u7e2c" +
                    "\0\u7e8b\0\u7eea\0\u7f49\0\u01db\0\u01db\0\u7fa8\0\u8007\0\u01db" +
                    "\0\u8066\0\u80c5\0\u8124\0\u8183\0\u81e2\0\u01db\0\u01db\0\u01db" +
                    "\0\u8241\0\u82a0\0\u82ff\0\u835e";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[428];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
                    "\1\16\1\17\1\20\2\21\1\22\1\23\1\21\1\24" +
                    "\1\25\1\26\2\21\2\27\1\30\1\31\1\32\1\21" +
                    "\1\27\1\33\1\21\1\27\1\30\1\27\1\34\1\35" +
                    "\1\27\1\36\1\37\1\21\1\37\17\27\1\30\3\27" +
                    "\1\40\2\37\1\41\1\37\1\42\1\37\1\43\1\44" +
                    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54" +
                    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64" +
                    "\1\65\1\37\2\21\1\6\1\66\2\21\1\67\1\70" +
                    "\1\21\1\71\1\72\27\71\1\73\70\71\1\74\5\71" +
                    "\1\0\7\71\1\72\27\71\1\75\70\71\1\76\5\71" +
                    "\1\0\7\71\1\72\103\71\1\77\12\71\1\100\7\71" +
                    "\1\0\6\71\1\0\1\7\1\10\1\11\1\101\14\102" +
                    "\1\103\2\102\1\0\1\102\1\0\1\102\1\0\1\104" +
                    "\10\102\1\11\30\102\1\105\1\102\1\0\13\102\3\0" +
                    "\2\102\1\106\3\102\2\107\4\102\1\0\6\102\140\0" +
                    "\1\11\1\10\1\11\36\0\1\11\75\0\1\11\1\0" +
                    "\1\11\36\0\1\11\75\0\1\110\1\0\1\110\1\37" +
                    "\1\111\1\112\1\113\1\114\6\112\1\115\1\37\1\0" +
                    "\3\112\4\0\1\37\1\112\2\0\1\112\3\0\1\37" +
                    "\1\110\2\0\1\37\1\112\1\37\24\0\15\37\14\0" +
                    "\1\37\2\112\1\0\6\112\4\0\1\116\1\21\1\117" +
                    "\2\21\1\120\6\21\2\0\7\21\1\0\7\21\2\0" +
                    "\1\21\2\0\1\21\1\0\24\21\32\0\2\21\1\0" +
                    "\3\21\1\121\2\21\4\0\1\116\10\21\1\122\2\21" +
                    "\2\0\7\21\1\0\7\21\2\0\1\21\2\0\1\21" +
                    "\1\0\24\21\32\0\2\21\1\0\6\21\4\0\1\116" +
                    "\3\21\1\123\4\21\1\124\2\21\2\0\7\21\1\0" +
                    "\1\125\6\21\2\0\1\21\2\0\1\21\1\0\24\21" +
                    "\32\0\2\21\1\0\6\21\4\0\1\116\5\21\1\126" +
                    "\5\21\2\0\7\21\1\0\7\21\2\0\1\21\2\0" +
                    "\1\21\1\0\24\21\32\0\2\21\1\0\6\21\4\0" +
                    "\1\116\3\21\1\127\7\21\2\0\7\21\1\0\7\21" +
                    "\2\0\1\21\2\0\1\21\1\0\24\21\32\0\2\21" +
                    "\1\0\6\21\4\0\1\116\3\21\1\130\7\21\2\0" +
                    "\7\21\1\0\7\21\2\0\1\21\2\0\1\21\1\0" +
                    "\24\21\32\0\2\21\1\0\6\21\4\0\1\116\13\21" +
                    "\2\0\7\21\1\0\7\21\2\0\1\21\2\0\1\21" +
                    "\1\0\24\21\32\0\2\21\1\0\6\21\4\0\1\116" +
                    "\1\21\1\131\11\21\2\0\7\21\1\0\7\21\2\0" +
                    "\1\21\2\0\1\21\1\0\24\21\32\0\2\21\1\0" +
                    "\6\21\4\0\1\116\5\21\1\132\5\21\2\0\7\21" +
                    "\1\0\1\133\6\21\2\0\1\21\2\0\1\21\1\0" +
                    "\24\21\32\0\2\21\1\0\6\21\4\0\1\37\13\0" +
                    "\1\37\10\0\1\37\7\0\1\37\3\0\1\37\1\0" +
                    "\1\37\24\0\15\37\14\0\1\37\1\134\10\0\2\135" +
                    "\1\136\15\135\1\137\1\136\115\135\4\0\1\116\13\21" +
                    "\2\0\1\140\4\21\1\141\1\21\1\0\2\21\1\141" +
                    "\2\21\1\141\1\21\2\0\1\21\2\0\1\21\1\0" +
                    "\17\21\1\141\4\21\32\0\2\21\1\0\6\21\4\0" +
                    "\1\142\13\27\2\0\7\27\1\0\7\27\2\0\1\27" +
                    "\2\0\1\27\1\0\24\27\32\0\2\27\1\0\6\27" +
                    "\10\0\1\143\11\0\1\144\4\0\1\30\1\31\3\0" +
                    "\1\30\2\0\1\30\1\0\1\145\1\0\1\143\23\0" +
                    "\1\30\71\0\1\146\4\0\2\31\3\0\1\31\2\0" +
                    "\1\31\27\0\1\31\53\0\1\37\13\0\1\37\1\0" +
                    "\1\144\4\0\1\30\1\31\1\147\2\0\1\30\2\0" +
                    "\1\30\1\0\1\37\1\150\2\0\1\37\1\0\1\37" +
                    "\17\0\1\30\4\0\5\37\1\53\7\37\14\0\1\37" +
                    "\21\0\1\143\4\0\1\151\4\0\1\144\4\0\1\30" +
                    "\1\31\3\0\1\30\2\152\1\30\1\151\1\145\1\0" +
                    "\1\143\23\0\1\30\50\0\1\11\1\0\1\11\35\0" +
                    "\1\145\1\11\100\0\1\37\13\0\1\37\10\0\1\37" +
                    "\7\0\1\37\3\0\1\37\1\0\1\37\24\0\15\37" +
                    "\14\0\1\37\11\0\2\153\1\0\15\153\1\154\52\153" +
                    "\1\0\13\153\1\155\27\153\4\0\1\37\13\0\1\37" +
                    "\1\0\1\144\4\0\1\30\1\31\1\37\2\0\1\30" +
                    "\2\0\1\30\1\0\1\37\1\150\2\0\1\37\1\0" +
                    "\1\37\17\0\1\30\4\0\15\37\14\0\1\37\15\0" +
                    "\1\37\13\0\1\37\10\0\1\52\7\0\1\37\3\0" +
                    "\1\37\1\0\1\37\24\0\15\37\14\0\1\37\15\0" +
                    "\1\37\13\112\1\37\1\0\3\112\4\0\1\37\1\112" +
                    "\2\0\1\112\3\0\1\37\3\0\1\37\1\112\1\37" +
                    "\24\0\15\37\14\0\1\37\2\112\1\0\6\112\4\0" +
                    "\1\37\13\0\1\37\10\0\1\37\7\0\1\37\3\0" +
                    "\1\37\1\0\1\37\24\0\5\37\1\54\7\37\14\0" +
                    "\1\37\15\0\1\156\13\0\1\156\10\0\1\156\7\0" +
                    "\1\156\3\0\1\156\1\0\1\156\24\0\13\156\1\157" +
                    "\1\156\14\0\1\156\15\0\1\160\13\161\2\0\5\161" +
                    "\3\0\2\161\1\0\2\161\1\0\1\161\1\162\1\0" +
                    "\1\161\2\0\1\161\1\0\17\161\1\0\3\161\4\0" +
                    "\1\162\2\0\1\160\2\0\1\163\20\0\2\161\1\0" +
                    "\6\161\31\0\1\164\111\0\1\116\13\21\2\0\7\21" +
                    "\1\0\7\21\2\0\1\21\2\0\1\21\1\0\24\21" +
                    "\32\0\2\21\1\0\1\21\1\165\3\21\1\166\4\0" +
                    "\1\116\10\21\1\167\2\21\2\0\7\21\1\0\7\21" +
                    "\2\0\1\21\2\0\1\21\1\0\24\21\32\0\2\21" +
                    "\1\0\6\21\4\0\1\116\13\21\2\0\7\21\1\0" +
                    "\7\21\2\0\1\21\2\0\1\21\1\0\24\21\32\0" +
                    "\2\21\1\0\5\21\1\170\2\0\1\71\257\0\1\171" +
                    "\44\0\1\172\230\0\1\173\44\0\1\174\151\0\1\175" +
                    "\76\0\1\176\13\177\2\0\5\177\3\0\2\177\1\0" +
                    "\2\177\1\0\1\177\1\200\1\0\1\177\2\0\1\177" +
                    "\1\0\17\177\1\0\3\177\4\0\1\200\2\0\1\176" +
                    "\2\0\1\201\20\0\2\177\1\0\6\177\4\0\20\102" +
                    "\1\0\1\102\1\0\1\102\1\0\1\202\10\102\1\0" +
                    "\32\102\1\0\13\102\3\0\6\102\2\0\4\102\1\0" +
                    "\6\102\4\0\20\102\1\0\1\102\1\0\1\102\1\0" +
                    "\11\102\1\0\32\102\1\0\13\102\3\0\6\102\2\0" +
                    "\4\102\1\0\6\102\2\135\1\136\1\135\14\103\1\203" +
                    "\1\204\2\103\1\135\1\103\1\135\1\103\1\135\11\103" +
                    "\1\135\32\103\1\135\13\103\3\135\6\103\2\135\4\103" +
                    "\1\135\6\103\2\153\1\0\1\153\14\205\1\206\3\205" +
                    "\1\153\1\205\1\153\1\205\1\153\11\205\1\153\30\205" +
                    "\1\102\1\205\1\153\13\205\3\153\6\205\2\153\4\205" +
                    "\1\153\6\205\1\0\1\110\1\0\1\110\1\0\1\207" +
                    "\1\0\1\210\1\211\6\0\1\212\22\0\1\110\101\0" +
                    "\1\112\1\213\2\112\1\214\6\112\2\0\7\112\1\0" +
                    "\7\112\2\0\1\112\2\0\1\112\1\0\24\112\32\0" +
                    "\2\112\1\0\6\112\5\0\13\112\2\0\7\112\1\0" +
                    "\7\112\2\0\1\112\2\0\1\112\1\0\24\112\32\0" +
                    "\2\112\1\0\6\112\5\0\3\112\1\215\7\112\2\0" +
                    "\7\112\1\0\7\112\2\0\1\112\2\0\1\112\1\0" +
                    "\24\112\32\0\2\112\1\0\6\112\5\0\4\112\1\216" +
                    "\1\217\1\112\1\220\3\112\2\0\7\112\1\0\7\112" +
                    "\2\0\1\112\2\0\1\112\1\0\24\112\32\0\2\112" +
                    "\1\0\6\112\5\0\4\112\1\221\6\112\2\0\7\112" +
                    "\1\0\7\112\2\0\1\112\2\0\1\112\1\0\24\112" +
                    "\32\0\2\112\1\0\6\112\4\0\1\116\1\21\1\222" +
                    "\4\21\1\223\4\21\2\0\7\21\1\0\7\21\2\0" +
                    "\1\21\2\0\1\21\1\0\24\21\32\0\2\21\1\0" +
                    "\6\21\4\0\1\116\13\21\2\0\7\21\1\0\7\21" +
                    "\2\0\1\21\2\0\1\21\1\0\24\21\32\0\2\21" +
                    "\1\0\2\21\1\224\3\21\4\0\1\116\7\21\1\225" +
                    "\3\21\2\0\7\21\1\0\7\21\2\0\1\21\2\0" +
                    "\1\21\1\0\24\21\32\0\2\21\1\0\6\21\4\0" +
                    "\1\116\1\21\1\226\5\21\1\227\3\21\2\0\7\21" +
                    "\1\0\7\21\2\0\1\21\2\0\1\21\1\0\24\21" +
                    "\32\0\2\21\1\0\6\21\4\0\1\116\13\21\2\0" +
                    "\7\21\1\0\7\21\2\0\1\21\2\0\1\21\1\0" +
                    "\24\21\32\0\2\21\1\0\1\230\5\21\4\0\1\116" +
                    "\6\21\1\231\4\21\2\0\7\21\1\0\7\21\2\0" +
                    "\1\21\2\0\1\21\1\0\24\21\32\0\2\21\1\0" +
                    "\6\21\4\0\1\116\13\21\2\0\7\21\1\0\7\21" +
                    "\2\0\1\21\2\0\1\21\1\0\24\21\32\0\2\21" +
                    "\1\0\4\21\1\232\1\21\4\0\1\116\13\21\2\0" +
                    "\7\21\1\0\7\21\2\0\1\21\2\0\1\21\1\0" +
                    "\24\21\32\0\2\21\1\0\1\233\5\21\4\0\1\116" +
                    "\13\21\2\0\7\21\1\0\1\234\6\21\2\0\1\21" +
                    "\2\0\1\21\1\0\24\21\32\0\2\21\1\0\6\21" +
                    "\4\0\1\116\6\21\1\235\4\21\2\0\7\21\1\0" +
                    "\7\21\2\0\1\21\2\0\1\21\1\0\24\21\32\0" +
                    "\2\21\1\0\6\21\10\0\1\236\127\0\3\237\2\0" +
                    "\1\135\2\0\1\135\2\0\1\135\1\240\2\0\2\135" +
                    "\5\0\2\135\1\0\1\135\1\241\1\135\1\242\1\0" +
                    "\1\135\2\0\1\237\1\243\1\0\2\135\1\244\1\245" +
                    "\1\246\1\247\1\250\1\251\2\0\1\252\1\253\1\0" +
                    "\1\254\1\255\1\251\1\246\1\0\1\135\2\0\1\246" +
                    "\1\135\32\0\1\135\2\0\1\135\11\0\1\116\3\21" +
                    "\1\256\7\21\2\0\1\140\4\21\1\141\1\21\1\0" +
                    "\2\21\1\141\2\21\1\141\1\21\1\145\1\0\1\256" +
                    "\2\0\1\21\1\0\17\21\1\141\4\21\32\0\2\21" +
                    "\1\0\6\21\27\0\1\257\1\0\1\260\2\0\1\257" +
                    "\2\0\1\257\27\0\1\257\6\0\1\260\62\0\1\144" +
                    "\4\0\1\30\1\31\3\0\1\30\2\0\1\30\27\0" +
                    "\1\30\71\0\1\145\4\0\1\261\4\0\1\261\2\0" +
                    "\1\261\27\0\1\261\47\0\1\262\1\263\1\0\1\264" +
                    "\1\37\34\262\1\37\1\264\2\262\1\37\26\262\1\37" +
                    "\1\262\1\37\1\262\5\37\32\262\41\0\1\145\117\0" +
                    "\1\151\11\0\1\265\2\0\1\265\27\0\1\265\55\0" +
                    "\3\266\5\0\1\266\3\0\1\152\4\0\1\266\2\0" +
                    "\3\266\2\0\1\266\3\0\1\266\13\0\2\266\1\0" +
                    "\2\266\3\0\1\266\36\0\1\266\103\0\1\267\51\0" +
                    "\1\153\2\0\1\153\2\0\1\153\1\270\2\0\2\153" +
                    "\5\0\2\271\1\0\1\153\1\272\1\271\1\273\1\0" +
                    "\1\271\3\0\1\274\1\0\2\153\1\275\1\276\1\277" +
                    "\1\300\1\301\1\302\2\0\1\303\1\304\1\0\1\305" +
                    "\1\306\1\302\1\277\1\0\1\271\2\0\1\277\1\153" +
                    "\32\0\1\153\2\0\1\153\11\0\1\156\13\0\1\156" +
                    "\10\0\1\156\7\0\1\156\3\0\1\156\1\0\1\156" +
                    "\23\0\1\267\15\156\14\0\1\156\15\0\1\156\13\0" +
                    "\1\156\10\0\1\156\7\0\1\156\3\0\1\156\1\0" +
                    "\1\156\24\0\15\156\14\0\1\156\16\0\13\307\2\0" +
                    "\3\307\5\0\1\307\2\0\1\307\10\0\1\307\57\0" +
                    "\2\307\1\0\6\307\4\0\1\162\13\161\2\0\7\161" +
                    "\1\0\7\161\1\162\1\0\1\161\2\0\1\161\1\0" +
                    "\24\161\3\0\1\162\2\0\1\160\2\0\1\163\20\0" +
                    "\2\161\1\0\6\161\1\0\1\310\1\0\1\310\1\311" +
                    "\35\0\1\310\42\0\1\312\35\0\1\116\13\21\2\0" +
                    "\7\21\1\0\7\21\2\0\1\21\2\0\1\21\1\0" +
                    "\24\21\32\0\2\21\1\0\2\21\1\313\3\21\4\0" +
                    "\1\116\3\21\1\314\7\21\2\0\7\21\1\0\7\21" +
                    "\2\0\1\21\2\0\1\21\1\0\24\21\32\0\2\21" +
                    "\1\0\6\21\4\0\1\116\2\21\1\315\10\21\2\0" +
                    "\7\21\1\0\7\21\2\0\1\21\2\0\1\21\1\0" +
                    "\24\21\32\0\2\21\1\0\6\21\4\0\1\116\3\21" +
                    "\1\316\7\21\2\0\7\21\1\0\7\21\2\0\1\21" +
                    "\2\0\1\21\1\0\24\21\32\0\2\21\1\0\6\21" +
                    "\5\0\13\317\2\0\3\317\5\0\1\317\2\0\1\317" +
                    "\10\0\1\317\57\0\2\317\1\0\6\317\4\0\1\200" +
                    "\13\177\2\0\7\177\1\0\7\177\1\200\1\0\1\177" +
                    "\2\0\1\177\1\0\24\177\3\0\1\200\2\0\1\176" +
                    "\2\0\1\201\20\0\2\177\1\0\6\177\4\0\20\102" +
                    "\1\0\1\102\1\0\1\102\1\0\11\102\1\0\32\102" +
                    "\1\0\13\102\3\0\6\102\1\0\1\320\4\102\1\0" +
                    "\6\102\1\0\3\237\2\102\1\103\2\102\1\103\2\102" +
                    "\1\103\1\321\2\102\2\103\2\102\1\0\1\102\1\0" +
                    "\1\103\1\135\1\102\1\103\1\322\1\103\1\323\1\102" +
                    "\1\103\2\102\1\237\1\324\1\102\2\103\1\325\1\326" +
                    "\1\327\1\330\1\331\1\332\2\102\1\333\1\334\1\102" +
                    "\1\335\1\336\1\332\1\327\1\102\1\103\2\102\1\327" +
                    "\1\103\1\102\1\0\13\102\3\0\6\102\2\0\2\102" +
                    "\1\103\1\102\1\0\1\103\5\102\4\0\20\102\1\0" +
                    "\1\102\1\0\1\102\1\0\11\102\1\0\30\102\1\337" +
                    "\1\102\1\0\13\102\3\0\6\102\2\0\4\102\1\0" +
                    "\6\102\4\0\2\102\1\205\2\102\1\205\2\102\1\205" +
                    "\1\340\2\102\2\205\2\102\1\0\1\102\1\0\1\341" +
                    "\1\271\1\102\1\205\1\342\1\341\1\343\1\102\1\341" +
                    "\2\102\1\0\1\344\1\102\2\205\1\345\1\346\1\347" +
                    "\1\350\1\351\1\352\2\102\1\353\1\354\1\102\1\355" +
                    "\1\356\1\352\1\347\1\102\1\341\2\102\1\347\1\205" +
                    "\1\102\1\0\13\102\3\0\6\102\2\0\2\102\1\205" +
                    "\1\102\1\0\1\205\5\102\6\0\1\357\2\0\1\360" +
                    "\135\0\1\361\137\0\1\362\1\363\1\0\1\364\133\0" +
                    "\1\365\125\0\1\357\2\0\2\357\13\213\1\366\1\357" +
                    "\7\213\1\357\7\213\2\357\1\213\2\357\1\213\1\357" +
                    "\24\213\32\357\2\213\1\357\6\213\5\0\11\112\1\367" +
                    "\1\112\2\0\7\112\1\0\7\112\2\0\1\112\2\0" +
                    "\1\112\1\0\24\112\32\0\2\112\1\0\6\112\5\0" +
                    "\1\112\1\370\11\112\2\0\7\112\1\0\7\112\2\0" +
                    "\1\112\2\0\1\112\1\0\24\112\32\0\2\112\1\0" +
                    "\6\112\5\0\2\112\1\371\10\112\2\0\7\112\1\0" +
                    "\7\112\2\0\1\112\2\0\1\112\1\0\24\112\32\0" +
                    "\2\112\1\0\6\112\5\0\1\372\5\112\1\373\4\112" +
                    "\2\0\7\112\1\0\7\112\2\0\1\112\2\0\1\112" +
                    "\1\0\24\112\32\0\2\112\1\0\6\112\5\0\7\112" +
                    "\1\374\3\112\2\0\7\112\1\0\7\112\2\0\1\112" +
                    "\2\0\1\112\1\0\24\112\32\0\2\112\1\0\6\112" +
                    "\5\0\2\112\1\375\10\112\2\0\7\112\1\0\7\112" +
                    "\2\0\1\112\2\0\1\112\1\0\24\112\32\0\2\112" +
                    "\1\0\6\112\4\0\1\116\1\376\12\21\2\0\7\21" +
                    "\1\0\7\21\2\0\1\21\2\0\1\21\1\0\24\21" +
                    "\32\0\2\21\1\0\6\21\4\0\1\116\13\21\2\0" +
                    "\7\21\1\0\7\21\2\0\1\21\2\0\1\21\1\0" +
                    "\24\21\32\0\2\21\1\0\1\377\5\21\4\0\1\116" +
                    "\10\21\1\u0100\2\21\2\0\7\21\1\0\7\21\2\0" +
                    "\1\21\2\0\1\21\1\0\24\21\32\0\2\21\1\0" +
                    "\6\21\4\0\1\116\3\21\1\u0101\7\21\2\0\7\21" +
                    "\1\0\7\21\2\0\1\21\2\0\1\21\1\0\24\21" +
                    "\32\0\2\21\1\0\6\21\4\0\1\116\13\21\2\0" +
                    "\7\21\1\0\1\u0102\6\21\2\0\1\21\2\0\1\21" +
                    "\1\0\24\21\32\0\2\21\1\0\6\21\4\0\1\116" +
                    "\1\u0103\12\21\2\0\7\21\1\0\7\21\2\0\1\21" +
                    "\2\0\1\21\1\0\24\21\32\0\2\21\1\0\6\21" +
                    "\4\0\1\116\13\21\2\0\7\21\1\0\1\u0104\6\21" +
                    "\2\0\1\21\2\0\1\21\1\0\24\21\32\0\2\21" +
                    "\1\0\6\21\4\0\1\116\3\21\1\u0105\7\21\2\0" +
                    "\7\21\1\0\7\21\2\0\1\21\2\0\1\21\1\0" +
                    "\24\21\32\0\2\21\1\0\6\21\4\0\1\116\13\21" +
                    "\2\0\7\21\1\0\7\21\2\0\1\21\2\0\1\21" +
                    "\1\0\24\21\32\0\2\21\1\0\1\u0106\5\21\4\0" +
                    "\1\116\6\21\1\u0107\4\21\2\0\7\21\1\0\7\21" +
                    "\2\0\1\21\2\0\1\21\1\0\24\21\32\0\2\21" +
                    "\1\0\6\21\4\0\1\116\3\21\1\u0108\7\21\2\0" +
                    "\7\21\1\0\7\21\2\0\1\21\2\0\1\21\1\0" +
                    "\24\21\32\0\2\21\1\0\6\21\127\0\1\u0109\10\0" +
                    "\3\237\14\0\1\135\21\0\1\237\130\0\1\135\2\0" +
                    "\1\135\27\0\1\135\112\0\1\u010a\6\0\1\u010b\5\0" +
                    "\1\u010c\64\0\3\135\5\0\1\135\10\0\1\135\2\0" +
                    "\3\135\2\0\1\135\3\0\1\135\13\0\2\135\1\0" +
                    "\2\135\3\0\1\135\36\0\1\135\50\0\1\251\7\0" +
                    "\1\u010d\2\0\1\u010e\1\0\1\u010f\13\0\1\135\65\0" +
                    "\1\135\1\0\1\135\2\0\2\135\4\0\1\135\2\0" +
                    "\1\135\1\0\1\135\2\0\2\135\2\0\20\135\1\0" +
                    "\3\135\11\0\1\135\13\0\1\135\67\0\1\u010a\5\0" +
                    "\1\u0110\132\0\1\135\146\0\1\135\113\0\1\135\10\0" +
                    "\1\u0111\3\0\1\u0112\10\0\1\135\1\0\1\u0113\123\0" +
                    "\1\135\141\0\1\u0110\135\0\1\u0113\5\0\1\135\114\0" +
                    "\1\u010a\7\0\1\135\136\0\1\135\7\0\1\135\57\0" +
                    "\1\116\13\21\2\0\7\21\1\260\7\21\2\0\1\21" +
                    "\2\0\1\21\1\0\24\21\2\0\1\260\27\0\2\21" +
                    "\1\0\6\21\27\0\1\257\4\0\1\257\2\0\1\257" +
                    "\27\0\1\257\57\0\1\143\11\0\1\145\4\0\1\261" +
                    "\4\0\1\261\2\0\1\261\3\0\1\143\23\0\1\261" +
                    "\47\0\1\262\2\0\134\262\1\0\1\u0114\1\0\1\u0114" +
                    "\36\0\1\u0114\4\0\1\u0115\35\0\1\u0115\31\0\1\262" +
                    "\1\u0114\1\0\1\u0116\36\262\1\u0116\4\262\1\u0117\35\262" +
                    "\1\u0117\31\262\34\0\1\u0118\2\0\1\u0118\27\0\1\u0118" +
                    "\76\0\2\271\3\0\1\271\2\0\1\271\27\0\1\271" +
                    "\3\0\1\267\106\0\1\u0119\6\0\1\u011a\5\0\1\u011b" +
                    "\64\0\3\u011c\5\0\1\u011c\10\0\1\u011c\2\0\3\u011c" +
                    "\2\0\1\u011c\3\0\1\u011c\13\0\2\u011c\1\0\2\u011c" +
                    "\3\0\1\u011c\36\0\1\u011c\50\0\1\302\7\0\1\u011d" +
                    "\2\0\1\u011e\1\0\1\u011f\13\0\1\153\65\0\1\153" +
                    "\1\0\1\153\2\0\2\153\4\0\1\153\2\0\1\153" +
                    "\1\0\1\153\2\0\2\153\2\0\20\153\1\0\3\153" +
                    "\11\0\1\153\13\0\1\153\67\0\1\u0119\5\0\1\u0120" +
                    "\132\0\1\153\146\0\1\153\113\0\1\u0121\10\0\1\u0122" +
                    "\3\0\1\u0123\10\0\1\153\1\0\1\u0124\123\0\1\153" +
                    "\141\0\1\u0120\135\0\1\u0124\5\0\1\153\114\0\1\u0119" +
                    "\7\0\1\153\136\0\1\153\7\0\1\153\57\0\1\160" +
                    "\13\161\2\0\5\161\2\307\1\0\2\161\1\307\2\161" +
                    "\1\307\1\161\1\162\1\0\1\161\2\0\1\161\1\0" +
                    "\17\161\1\307\3\161\1\307\3\0\1\162\2\0\1\160" +
                    "\2\0\1\163\20\0\2\161\1\0\6\161\105\0\1\312" +
                    "\35\0\1\116\3\21\1\u0125\7\21\2\0\7\21\1\0" +
                    "\7\21\2\0\1\21\2\0\1\21\1\0\24\21\32\0" +
                    "\2\21\1\0\6\21\4\0\1\116\4\21\1\u0126\6\21" +
                    "\2\0\7\21\1\0\7\21\2\0\1\21\2\0\1\21" +
                    "\1\0\24\21\32\0\2\21\1\0\6\21\4\0\1\116" +
                    "\12\21\1\u0127\2\0\7\21\1\0\7\21\2\0\1\21" +
                    "\2\0\1\21\1\0\24\21\32\0\2\21\1\0\6\21" +
                    "\4\0\1\116\7\21\1\u0128\3\21\2\0\7\21\1\0" +
                    "\7\21\2\0\1\21\2\0\1\21\1\0\24\21\32\0" +
                    "\2\21\1\0\6\21\4\0\1\176\13\177\2\0\5\177" +
                    "\2\317\1\0\2\177\1\317\2\177\1\317\1\177\1\200" +
                    "\1\0\1\177\2\0\1\177\1\0\17\177\1\317\3\177" +
                    "\1\317\3\0\1\200\2\0\1\176\2\0\1\201\20\0" +
                    "\2\177\1\0\6\177\4\0\20\102\1\0\1\102\1\0" +
                    "\1\102\1\0\3\102\1\103\2\102\1\103\2\102\1\0" +
                    "\24\102\1\103\5\102\1\0\13\102\3\0\6\102\2\0" +
                    "\4\102\1\0\6\102\4\0\20\102\1\0\1\102\1\0" +
                    "\1\102\1\0\11\102\1\0\1\u0129\6\102\1\u012a\5\102" +
                    "\1\u012b\14\102\1\0\13\102\3\0\6\102\2\0\4\102" +
                    "\1\0\6\102\4\0\2\102\3\103\5\102\1\103\5\102" +
                    "\1\0\1\102\1\0\1\103\1\0\1\102\3\103\2\102" +
                    "\1\103\2\102\1\0\1\103\13\102\2\103\1\102\2\103" +
                    "\3\102\1\103\5\102\1\0\13\102\3\0\6\102\2\0" +
                    "\2\102\1\103\1\102\1\0\6\102\4\0\20\102\1\0" +
                    "\1\102\1\0\1\102\1\0\7\102\1\332\1\102\1\0" +
                    "\5\102\1\u012c\2\102\1\u012d\1\102\1\u012e\13\102\1\103" +
                    "\3\102\1\0\13\102\3\0\6\102\2\0\4\102\1\0" +
                    "\6\102\4\0\14\102\1\103\1\102\1\103\1\102\1\0" +
                    "\1\103\1\135\1\102\1\0\2\102\1\103\2\102\1\103" +
                    "\1\102\1\103\1\102\1\0\2\103\2\102\20\103\1\102" +
                    "\3\103\2\102\1\0\6\102\1\103\4\102\3\0\4\102" +
                    "\1\103\1\102\2\0\4\102\1\0\6\102\4\0\20\102" +
                    "\1\0\1\102\1\0\1\102\1\0\11\102\1\0\6\102" +
                    "\1\u0129\5\102\1\u012f\15\102\1\0\13\102\3\0\6\102" +
                    "\2\0\4\102\1\0\6\102\4\0\20\102\1\0\1\102" +
                    "\1\0\1\102\1\0\11\102\1\0\10\102\1\103\21\102" +
                    "\1\0\13\102\3\0\6\102\2\0\4\102\1\0\6\102" +
                    "\4\0\20\102\1\0\1\102\1\0\1\102\1\0\11\102" +
                    "\1\0\20\102\1\103\11\102\1\0\13\102\3\0\6\102" +
                    "\2\0\4\102\1\0\6\102\4\0\20\102\1\0\1\102" +
                    "\1\0\1\102\1\0\7\102\1\103\1\102\1\0\6\102" +
                    "\1\u0130\3\102\1\u0131\10\102\1\103\1\102\1\u0132\4\102" +
                    "\1\0\13\102\3\0\6\102\2\0\4\102\1\0\6\102" +
                    "\4\0\20\102\1\0\1\102\1\0\1\102\1\0\11\102" +
                    "\1\0\12\102\1\103\17\102\1\0\13\102\3\0\6\102" +
                    "\2\0\4\102\1\0\6\102\4\0\20\102\1\0\1\102" +
                    "\1\0\1\102\1\0\11\102\1\0\15\102\1\u012f\14\102" +
                    "\1\0\13\102\3\0\6\102\2\0\4\102\1\0\6\102" +
                    "\4\0\20\102\1\0\1\102\1\0\1\102\1\0\11\102" +
                    "\1\0\14\102\1\u0132\5\102\1\103\7\102\1\0\13\102" +
                    "\3\0\6\102\2\0\4\102\1\0\6\102\4\0\20\102" +
                    "\1\0\1\102\1\0\1\102\1\0\11\102\1\0\1\u0129" +
                    "\7\102\1\103\21\102\1\0\13\102\3\0\6\102\2\0" +
                    "\4\102\1\0\6\102\4\0\20\102\1\0\1\102\1\0" +
                    "\1\102\1\0\11\102\1\0\10\102\1\103\7\102\1\103" +
                    "\11\102\1\0\13\102\3\0\6\102\2\0\4\102\1\0" +
                    "\6\102\4\0\20\102\1\0\1\102\1\0\1\102\1\0" +
                    "\3\102\1\u0133\2\102\1\u0133\2\102\1\0\24\102\1\u0133" +
                    "\5\102\1\0\13\102\3\0\6\102\2\0\4\102\1\0" +
                    "\6\102\4\0\20\102\1\0\1\102\1\0\1\341\1\271" +
                    "\3\102\1\341\2\102\1\341\2\102\1\0\24\102\1\341" +
                    "\3\102\1\337\1\102\1\0\13\102\3\0\6\102\2\0" +
                    "\4\102\1\0\6\102\4\0\20\102\1\0\1\102\1\0" +
                    "\1\102\1\0\11\102\1\0\1\u0134\6\102\1\u0135\5\102" +
                    "\1\u0136\14\102\1\0\13\102\3\0\6\102\2\0\4\102" +
                    "\1\0\6\102\4\0\2\102\3\u0137\5\102\1\u0137\5\102" +
                    "\1\0\1\102\1\0\1\u0137\1\0\1\102\3\u0137\2\102" +
                    "\1\u0137\2\102\1\0\1\u0137\13\102\2\u0137\1\102\2\u0137" +
                    "\3\102\1\u0137\5\102\1\0\13\102\3\0\6\102\2\0" +
                    "\2\102\1\u0137\1\102\1\0\6\102\4\0\20\102\1\0" +
                    "\1\102\1\0\1\102\1\0\7\102\1\352\1\102\1\0" +
                    "\5\102\1\u0138\2\102\1\u0139\1\102\1\u013a\13\102\1\205" +
                    "\3\102\1\0\13\102\3\0\6\102\2\0\4\102\1\0" +
                    "\6\102\4\0\14\102\1\205\1\102\1\205\1\102\1\0" +
                    "\1\205\1\153\1\102\1\0\2\102\1\205\2\102\1\205" +
                    "\1\102\1\205\1\102\1\0\2\205\2\102\20\205\1\102" +
                    "\3\205\2\102\1\0\6\102\1\205\4\102\3\0\4\102" +
                    "\1\205\1\102\2\0\4\102\1\0\6\102\4\0\20\102" +
                    "\1\0\1\102\1\0\1\102\1\0\11\102\1\0\6\102" +
                    "\1\u0134\5\102\1\u013b\15\102\1\0\13\102\3\0\6\102" +
                    "\2\0\4\102\1\0\6\102\4\0\20\102\1\0\1\102" +
                    "\1\0\1\102\1\0\11\102\1\0\10\102\1\205\21\102" +
                    "\1\0\13\102\3\0\6\102\2\0\4\102\1\0\6\102" +
                    "\4\0\20\102\1\0\1\102\1\0\1\102\1\0\11\102" +
                    "\1\0\20\102\1\205\11\102\1\0\13\102\3\0\6\102" +
                    "\2\0\4\102\1\0\6\102\4\0\20\102\1\0\1\102" +
                    "\1\0\1\102\1\0\7\102\1\u013c\1\102\1\0\6\102" +
                    "\1\u013d\3\102\1\u013e\10\102\1\205\1\102\1\u013f\4\102" +
                    "\1\0\13\102\3\0\6\102\2\0\4\102\1\0\6\102" +
                    "\4\0\20\102\1\0\1\102\1\0\1\102\1\0\11\102" +
                    "\1\0\12\102\1\205\17\102\1\0\13\102\3\0\6\102" +
                    "\2\0\4\102\1\0\6\102\4\0\20\102\1\0\1\102" +
                    "\1\0\1\102\1\0\11\102\1\0\15\102\1\u013b\14\102" +
                    "\1\0\13\102\3\0\6\102\2\0\4\102\1\0\6\102" +
                    "\4\0\20\102\1\0\1\102\1\0\1\102\1\0\11\102" +
                    "\1\0\14\102\1\u013f\5\102\1\205\7\102\1\0\13\102" +
                    "\3\0\6\102\2\0\4\102\1\0\6\102\4\0\20\102" +
                    "\1\0\1\102\1\0\1\102\1\0\11\102\1\0\1\u0134" +
                    "\7\102\1\205\21\102\1\0\13\102\3\0\6\102\2\0" +
                    "\4\102\1\0\6\102\4\0\20\102\1\0\1\102\1\0" +
                    "\1\102\1\0\11\102\1\0\10\102\1\205\7\102\1\205" +
                    "\11\102\1\0\13\102\3\0\6\102\2\0\4\102\1\0" +
                    "\6\102\1\357\2\0\15\357\1\366\116\357\16\0\1\u0140" +
                    "\126\0\1\u0141\137\0\1\u0142\134\0\1\u0143\5\0\1\u0144" +
                    "\137\0\1\u0145\131\0\1\u0146\127\0\1\357\1\u0147\16\357" +
                    "\1\366\116\357\5\0\5\112\1\u0148\5\112\2\0\7\112" +
                    "\1\0\7\112\2\0\1\112\2\0\1\112\1\0\24\112" +
                    "\32\0\2\112\1\0\6\112\5\0\1\u0149\12\112\2\0" +
                    "\7\112\1\0\7\112\2\0\1\112\2\0\1\112\1\0" +
                    "\24\112\32\0\2\112\1\0\6\112\5\0\1\372\12\112" +
                    "\2\0\7\112\1\0\7\112\2\0\1\112\2\0\1\112" +
                    "\1\0\24\112\32\0\2\112\1\0\6\112\5\0\1\112" +
                    "\1\213\11\112\2\0\7\112\1\0\7\112\2\0\1\112" +
                    "\2\0\1\112\1\0\24\112\32\0\2\112\1\0\6\112" +
                    "\5\0\3\112\1\213\7\112\2\0\7\112\1\0\7\112" +
                    "\2\0\1\112\2\0\1\112\1\0\24\112\32\0\2\112" +
                    "\1\0\6\112\5\0\10\112\1\u014a\2\112\2\0\7\112" +
                    "\1\0\7\112\2\0\1\112\2\0\1\112\1\0\24\112" +
                    "\32\0\2\112\1\0\6\112\5\0\3\112\1\372\7\112" +
                    "\2\0\7\112\1\0\7\112\2\0\1\112\2\0\1\112" +
                    "\1\0\24\112\32\0\2\112\1\0\6\112\4\0\1\116" +
                    "\13\21\2\0\7\21\1\0\3\21\1\u014b\3\21\2\0" +
                    "\1\21\2\0\1\21\1\0\24\21\32\0\2\21\1\0" +
                    "\6\21\4\0\1\116\13\21\2\0\7\21\1\0\1\u014c" +
                    "\6\21\2\0\1\21\2\0\1\21\1\0\24\21\32\0" +
                    "\2\21\1\0\6\21\4\0\1\116\7\21\1\u014d\3\21" +
                    "\2\0\7\21\1\0\7\21\2\0\1\21\2\0\1\21" +
                    "\1\0\24\21\32\0\2\21\1\0\6\21\4\0\1\116" +
                    "\1\u014e\12\21\2\0\7\21\1\0\7\21\2\0\1\21" +
                    "\2\0\1\21\1\0\24\21\32\0\2\21\1\0\6\21" +
                    "\4\0\1\116\12\21\1\u014f\2\0\7\21\1\0\7\21" +
                    "\2\0\1\21\2\0\1\21\1\0\24\21\32\0\2\21" +
                    "\1\0\6\21\4\0\1\116\13\21\2\0\7\21\1\0" +
                    "\7\21\2\0\1\21\2\0\1\u0150\1\0\24\21\32\0" +
                    "\2\21\1\0\6\21\4\0\1\116\13\21\2\0\7\21" +
                    "\1\0\7\21\2\0\1\21\2\0\1\21\1\0\24\21" +
                    "\32\0\2\21\1\0\1\21\1\u0151\4\21\4\0\1\116" +
                    "\6\21\1\u0152\4\21\2\0\7\21\1\0\7\21\2\0" +
                    "\1\21\2\0\1\21\1\0\24\21\32\0\2\21\1\0" +
                    "\6\21\5\0\1\u0153\203\0\1\135\127\0\1\135\162\0" +
                    "\1\135\125\0\1\135\140\0\1\135\114\0\1\135\23\0" +
                    "\1\135\135\0\1\135\137\0\1\135\112\0\1\135\150\0" +
                    "\1\135\67\0\1\u0114\1\0\1\u0114\36\0\1\u0114\74\0" +
                    "\1\u0115\1\u0154\1\u0155\134\u0115\1\262\1\u0114\1\0\1\u0116" +
                    "\36\262\1\u0116\74\262\1\u0117\1\u0154\1\u0155\134\u0117\34\0" +
                    "\1\u0118\2\0\1\u0118\27\0\1\u0118\3\0\1\267\115\0" +
                    "\1\153\127\0\1\153\162\0\1\153\55\0\3\u011c\5\0" +
                    "\1\u011c\10\0\1\u011c\2\0\3\u011c\2\0\1\u011c\3\0" +
                    "\1\u011c\13\0\2\u011c\1\0\2\u011c\3\0\1\u011c\3\0" +
                    "\1\267\32\0\1\u011c\66\0\1\153\140\0\1\153\114\0" +
                    "\1\153\23\0\1\153\135\0\1\153\131\0\1\153\16\0" +
                    "\1\267\125\0\1\153\112\0\1\153\150\0\1\153\72\0" +
                    "\1\116\13\21\2\0\7\21\1\0\7\21\1\0\1\u0156" +
                    "\1\21\2\0\1\21\1\0\24\21\32\0\2\21\1\0" +
                    "\6\21\4\0\1\116\5\21\1\u0157\5\21\2\0\7\21" +
                    "\1\0\7\21\2\0\1\21\2\0\1\21\1\0\24\21" +
                    "\32\0\2\21\1\0\6\21\4\0\1\116\3\21\1\u0158" +
                    "\7\21\2\0\7\21\1\0\7\21\2\0\1\21\2\0" +
                    "\1\21\1\0\24\21\32\0\2\21\1\0\6\21\4\0" +
                    "\20\102\1\0\1\102\1\0\1\102\1\0\11\102\1\0" +
                    "\7\102\1\103\22\102\1\0\13\102\3\0\6\102\2\0" +
                    "\4\102\1\0\6\102\4\0\20\102\1\0\1\102\1\0" +
                    "\1\102\1\0\11\102\1\0\1\103\31\102\1\0\13\102" +
                    "\3\0\6\102\2\0\4\102\1\0\6\102\4\0\20\102" +
                    "\1\0\1\102\1\0\1\102\1\0\11\102\1\0\24\102" +
                    "\1\103\5\102\1\0\13\102\3\0\6\102\2\0\4\102" +
                    "\1\0\6\102\4\0\20\102\1\0\1\102\1\0\1\102" +
                    "\1\0\11\102\1\0\13\102\1\103\16\102\1\0\13\102" +
                    "\3\0\6\102\2\0\4\102\1\0\6\102\4\0\20\102" +
                    "\1\0\1\102\1\0\1\102\1\0\11\102\1\0\15\102" +
                    "\1\103\14\102\1\0\13\102\3\0\6\102\2\0\4\102" +
                    "\1\0\6\102\4\0\20\102\1\0\1\102\1\0\1\102" +
                    "\1\0\5\102\1\103\3\102\1\0\17\102\1\103\12\102" +
                    "\1\0\13\102\3\0\6\102\2\0\4\102\1\0\6\102" +
                    "\4\0\20\102\1\0\1\102\1\0\1\102\1\0\11\102" +
                    "\1\0\16\102\1\103\13\102\1\0\13\102\3\0\6\102" +
                    "\2\0\4\102\1\0\6\102\4\0\20\102\1\0\1\102" +
                    "\1\0\1\102\1\0\11\102\1\0\17\102\1\103\12\102" +
                    "\1\0\13\102\3\0\6\102\2\0\4\102\1\0\6\102" +
                    "\4\0\20\102\1\0\1\102\1\0\1\102\1\0\5\102" +
                    "\1\103\3\102\1\0\32\102\1\0\13\102\3\0\6\102" +
                    "\2\0\4\102\1\0\6\102\4\0\20\102\1\0\1\102" +
                    "\1\0\1\102\1\0\11\102\1\0\5\102\1\103\24\102" +
                    "\1\0\13\102\3\0\6\102\2\0\4\102\1\0\6\102" +
                    "\4\0\20\102\1\0\1\102\1\0\1\102\1\0\3\102" +
                    "\1\u0133\2\102\1\u0133\2\102\1\0\24\102\1\u0133\3\102" +
                    "\1\337\1\102\1\0\13\102\3\0\6\102\2\0\4\102" +
                    "\1\0\6\102\4\0\20\102\1\0\1\102\1\0\1\102" +
                    "\1\0\11\102\1\0\7\102\1\205\22\102\1\0\13\102" +
                    "\3\0\6\102\2\0\4\102\1\0\6\102\4\0\20\102" +
                    "\1\0\1\102\1\0\1\102\1\0\11\102\1\0\1\205" +
                    "\31\102\1\0\13\102\3\0\6\102\2\0\4\102\1\0" +
                    "\6\102\4\0\20\102\1\0\1\102\1\0\1\102\1\0" +
                    "\11\102\1\0\24\102\1\205\5\102\1\0\13\102\3\0" +
                    "\6\102\2\0\4\102\1\0\6\102\4\0\2\102\3\u0137" +
                    "\5\102\1\u0137\5\102\1\0\1\102\1\0\1\u0137\1\0" +
                    "\1\102\3\u0137\2\102\1\u0137\2\102\1\0\1\u0137\13\102" +
                    "\2\u0137\1\102\2\u0137\3\102\1\u0137\3\102\1\337\1\102" +
                    "\1\0\13\102\3\0\6\102\2\0\2\102\1\u0137\1\102" +
                    "\1\0\6\102\4\0\20\102\1\0\1\102\1\0\1\102" +
                    "\1\0\11\102\1\0\13\102\1\205\16\102\1\0\13\102" +
                    "\3\0\6\102\2\0\4\102\1\0\6\102\4\0\20\102" +
                    "\1\0\1\102\1\0\1\102\1\0\11\102\1\0\15\102" +
                    "\1\205\14\102\1\0\13\102\3\0\6\102\2\0\4\102" +
                    "\1\0\6\102\4\0\20\102\1\0\1\102\1\0\1\102" +
                    "\1\0\5\102\1\205\3\102\1\0\17\102\1\205\12\102" +
                    "\1\0\13\102\3\0\6\102\2\0\4\102\1\0\6\102" +
                    "\4\0\20\102\1\0\1\102\1\0\1\102\1\0\11\102" +
                    "\1\0\16\102\1\205\13\102\1\0\13\102\3\0\6\102" +
                    "\2\0\4\102\1\0\6\102\4\0\20\102\1\0\1\102" +
                    "\1\0\1\102\1\0\11\102\1\0\11\102\1\205\16\102" +
                    "\1\337\1\102\1\0\13\102\3\0\6\102\2\0\4\102" +
                    "\1\0\6\102\4\0\20\102\1\0\1\102\1\0\1\102" +
                    "\1\0\11\102\1\0\17\102\1\205\12\102\1\0\13\102" +
                    "\3\0\6\102\2\0\4\102\1\0\6\102\4\0\20\102" +
                    "\1\0\1\102\1\0\1\102\1\0\5\102\1\205\3\102" +
                    "\1\0\32\102\1\0\13\102\3\0\6\102\2\0\4\102" +
                    "\1\0\6\102\4\0\20\102\1\0\1\102\1\0\1\102" +
                    "\1\0\11\102\1\0\5\102\1\205\24\102\1\0\13\102" +
                    "\3\0\6\102\2\0\4\102\1\0\6\102\12\0\1\u0159" +
                    "\131\0\1\u015a\136\0\1\u0143\137\0\1\357\140\0\1\357" +
                    "\143\0\1\u015b\131\0\1\u0143\126\0\1\357\1\0\16\357" +
                    "\1\366\116\357\5\0\12\112\1\u015c\2\0\7\112\1\0" +
                    "\7\112\2\0\1\112\2\0\1\112\1\0\24\112\32\0" +
                    "\2\112\1\0\6\112\5\0\4\112\1\373\6\112\2\0" +
                    "\7\112\1\0\7\112\2\0\1\112\2\0\1\112\1\0" +
                    "\24\112\32\0\2\112\1\0\6\112\5\0\7\112\1\213" +
                    "\3\112\2\0\7\112\1\0\7\112\2\0\1\112\2\0" +
                    "\1\112\1\0\24\112\32\0\2\112\1\0\6\112\4\0" +
                    "\1\116\5\21\1\u015d\1\21\1\u015e\3\21\2\0\7\21" +
                    "\1\0\7\21\2\0\1\21\2\0\1\21\1\0\24\21" +
                    "\32\0\2\21\1\0\6\21\4\0\1\116\4\21\1\u015f" +
                    "\6\21\2\0\7\21\1\0\7\21\2\0\1\21\2\0" +
                    "\1\21\1\0\24\21\32\0\2\21\1\0\6\21\4\0" +
                    "\1\116\13\21\2\0\7\21\1\0\7\21\2\0\1\21" +
                    "\2\0\1\21\1\0\24\21\32\0\2\21\1\0\1\u0160" +
                    "\5\21\4\0\1\116\13\21\2\0\7\21\1\0\7\21" +
                    "\2\0\1\21\2\0\1\21\1\0\24\21\32\0\1\21" +
                    "\1\u0161\1\0\6\21\4\0\1\116\5\21\1\u0162\5\21" +
                    "\2\0\7\21\1\0\7\21\2\0\1\21\2\0\1\21" +
                    "\1\0\24\21\32\0\2\21\1\0\6\21\4\0\1\116" +
                    "\1\u0163\12\21\2\0\7\21\1\0\7\21\2\0\1\21" +
                    "\2\0\1\21\1\0\24\21\32\0\2\21\1\0\6\21" +
                    "\4\0\1\116\13\21\2\0\7\21\1\0\7\21\2\0" +
                    "\1\21\2\0\1\21\1\0\24\21\32\0\2\21\1\0" +
                    "\2\21\1\u0164\3\21\11\0\1\u0165\126\0\1\u0166\1\u0155" +
                    "\1\u0166\14\0\1\u0167\10\0\1\u0168\10\0\1\u0166\75\0" +
                    "\1\u0166\1\0\1\u0166\14\0\1\u0167\10\0\1\u0168\10\0" +
                    "\1\u0166\101\0\1\u0169\1\u016a\134\0\1\116\3\21\1\u016b" +
                    "\7\21\2\0\7\21\1\0\7\21\2\0\1\21\2\0" +
                    "\1\21\1\0\24\21\32\0\2\21\1\0\6\21\17\0" +
                    "\1\u016c\130\0\1\u0144\141\0\1\357\127\0\2\112\1\u016d" +
                    "\10\112\2\0\7\112\1\0\7\112\2\0\1\112\2\0" +
                    "\1\112\1\0\24\112\32\0\2\112\1\0\6\112\4\0" +
                    "\1\116\11\21\1\u016e\1\21\2\0\7\21\1\0\7\21" +
                    "\2\0\1\21\2\0\1\21\1\0\24\21\32\0\2\21" +
                    "\1\0\6\21\4\0\1\116\4\21\1\u016f\6\21\2\0" +
                    "\7\21\1\0\7\21\2\0\1\21\2\0\1\21\1\0" +
                    "\24\21\32\0\2\21\1\0\6\21\4\0\1\116\13\21" +
                    "\2\0\7\21\1\0\7\21\2\0\1\21\2\0\1\21" +
                    "\1\0\24\21\32\0\2\21\1\0\1\u0170\5\21\4\0" +
                    "\1\116\4\21\1\u0171\6\21\2\0\7\21\1\0\7\21" +
                    "\2\0\1\21\2\0\1\21\1\0\24\21\32\0\2\21" +
                    "\1\0\6\21\4\0\1\116\3\21\1\u0172\7\21\2\0" +
                    "\7\21\1\0\7\21\2\0\1\21\2\0\1\21\1\0" +
                    "\24\21\32\0\2\21\1\0\6\21\122\0\1\u0173\142\0" +
                    "\1\u0174\41\0\1\u0175\116\0\1\u0176\157\0\1\u0177\113\0" +
                    "\1\u0178\134\0\3\112\1\u0179\7\112\2\0\7\112\1\0" +
                    "\7\112\2\0\1\112\2\0\1\112\1\0\24\112\32\0" +
                    "\2\112\1\0\6\112\4\0\1\116\3\21\1\u017a\7\21" +
                    "\2\0\7\21\1\0\7\21\2\0\1\21\2\0\1\21" +
                    "\1\0\24\21\32\0\2\21\1\0\6\21\4\0\1\116" +
                    "\13\21\2\0\7\21\1\0\7\21\1\0\1\u017b\1\21" +
                    "\2\0\1\21\1\0\24\21\32\0\2\21\1\0\6\21" +
                    "\4\0\1\116\13\21\2\0\7\21\1\0\7\21\2\0" +
                    "\1\21\2\0\1\21\1\0\24\21\32\0\1\21\1\u017c" +
                    "\1\0\6\21\16\0\1\u017d\130\0\1\u017e\126\0\1\u0115" +
                    "\1\u017f\1\u0155\1\u0180\1\0\34\u0115\1\0\1\u0180\2\u0115" +
                    "\1\0\26\u0115\1\0\1\u0115\1\0\1\u0115\5\0\32\u0115" +
                    "\13\0\1\u0181\257\0\1\u0182\12\0\1\u0183\126\0\1\357" +
                    "\1\u0184\1\0\1\u0183\1\357\13\213\1\366\1\u0185\7\213" +
                    "\1\357\7\213\1\357\1\u0183\1\213\2\357\1\213\1\357" +
                    "\24\213\32\357\2\213\1\357\6\213\5\0\1\u0186\2\0" +
                    "\1\u0187\143\0\1\u0188\250\0\1\u0189\10\0\1\u017f\1\u0155" +
                    "\1\u018a\14\0\1\u0167\10\0\1\u0168\10\0\1\u018a\74\0" +
                    "\1\u0115\1\u017f\1\u0155\1\u0180\36\u0115\1\u0180\74\u0115\131\0" +
                    "\1\u018b\12\0\1\u018c\131\0\1\357\1\u0184\1\0\1\u0183" +
                    "\14\357\1\366\1\u0185\20\357\1\u0183\74\357\1\0\1\u0184" +
                    "\1\0\1\u0184\15\0\1\u018d\20\0\1\u0184\74\0\1\357" +
                    "\2\0\2\357\13\u018e\1\366\1\357\7\u018e\1\357\10\u018e" +
                    "\1\357\1\u018e\2\357\1\u018e\1\357\23\u018e\4\357\1\u018e" +
                    "\26\357\2\u018e\1\357\6\u018e\134\0\1\u018f\37\0\1\u0190" +
                    "\110\0\1\u0191\134\0\1\u0192\163\0\1\u0193\116\0\1\u0194" +
                    "\131\0\13\u0195\2\0\7\u0195\1\0\10\u0195\1\0\1\u0195" +
                    "\2\0\1\u0195\1\0\23\u0195\4\0\1\u0195\26\0\2\u0195" +
                    "\1\0\6\u0195\1\357\2\0\2\357\13\u018e\1\366\1\u0196" +
                    "\7\u018e\1\357\10\u018e\1\357\1\u018e\2\357\1\u018e\1\357" +
                    "\23\u018e\4\357\1\u018e\26\357\2\u018e\1\357\6\u018e\133\0" +
                    "\1\u0197\136\0\1\u0198\13\0\1\u0199\137\0\1\u019a\136\0" +
                    "\1\u019b\257\0\1\u019c\11\0\13\u0195\1\0\1\u019d\7\u0195" +
                    "\1\0\10\u0195\1\0\1\u0195\2\0\1\u0195\1\0\23\u0195" +
                    "\4\0\1\u0195\26\0\2\u0195\1\0\6\u0195\15\0\1\u019e" +
                    "\136\0\1\u019f\244\0\1\u01a0\135\0\1\u01a1\32\0\1\u01a2" +
                    "\134\0\1\u01a3\136\0\1\u01a4\140\0\1\u01a5\130\0\1\u01a6" +
                    "\257\0\1\u01a7\136\0\1\u01a8\22\0\1\u01a9\130\0\1\u01aa" +
                    "\137\0\1\u01ab\251\0\1\u01ac\14\0\1\u0154\1\u0155\134\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[33725];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\5\0\1\11\1\1\1\11\23\1\1\11\1\1\1\11" +
                    "\16\1\4\11\1\1\1\11\1\1\2\11\3\1\1\11" +
                    "\15\1\1\11\1\0\5\1\1\11\15\1\2\0\1\11" +
                    "\1\0\2\1\1\11\4\0\1\1\5\0\3\1\3\0" +
                    "\1\11\5\1\5\11\3\0\1\11\5\1\4\0\23\1" +
                    "\20\0\2\1\1\0\6\1\1\11\21\0\2\11\4\1" +
                    "\1\0\1\11\37\1\6\0\23\1\13\0\1\1\1\0" +
                    "\2\1\15\0\33\1\7\0\14\1\1\0\2\1\1\0" +
                    "\2\1\3\0\11\1\6\0\1\1\1\0\6\1\6\0" +
                    "\2\1\1\0\1\1\2\0\1\1\3\0\1\1\1\0" +
                    "\1\1\10\0\1\1\7\0\1\1\5\0\2\11\2\0" +
                    "\1\11\5\0\3\11\4\0";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[428];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /* user code: */
    public _HaskellLexer() {
        this((java.io.Reader) null);
    }

    private int commentStart;
    private int commentDepth;

    private int optionsGhcStart;
    private int optionsGhcDepth;

    private int haddockStart;
    private int haddockDepth;

    private int qqStart;
    private int qqDepth;


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _HaskellLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        int size = 0;
        for (int i = 0, length = packed.length(); i < length; i += 2) {
            size += packed.charAt(i);
        }
        char[] map = new char[size];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < packed.length()) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                switch (zzLexicalState) {
                    case NCOMMENT: {
                        int state = yystate();
                        yybegin(YYINITIAL);
                        zzStartRead = commentStart;
                        return HS_NOT_TERMINATED_COMMENT;
                    }  // fall though
                    case 429:
                        break;
                    case NHADDOCK: {
                        int state = yystate();
                        yybegin(YYINITIAL);
                        zzStartRead = haddockStart;
                        return HS_NOT_TERMINATED_COMMENT;
                    }  // fall though
                    case 430:
                        break;
                    case QQ: {
                        int state = yystate();
                        yybegin(YYINITIAL);
                        zzStartRead = qqStart;
                        return HS_QUASIQUOTE;
                    }  // fall though
                    case 431:
                        break;
                    case OPTIONS_GHC: {
                        yybegin(YYINITIAL);
                        return com.intellij.psi.TokenType.BAD_CHARACTER;
                    }  // fall though
                    case 432:
                        break;
                    default:
                        return null;
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return com.intellij.psi.TokenType.BAD_CHARACTER;
                    }
                    // fall through
                    case 83:
                        break;
                    case 2: {
                        return HS_NEWLINE;
                    }
                    // fall through
                    case 84:
                        break;
                    case 3: {
                        return com.intellij.psi.TokenType.WHITE_SPACE;
                    }
                    // fall through
                    case 85:
                        break;
                    case 4: {
                        return HS_VARSYM_ID;
                    }
                    // fall through
                    case 86:
                        break;
                    case 5: {
                        return HS_VAR_ID;
                    }
                    // fall through
                    case 87:
                        break;
                    case 6: {
                        return HS_BACKSLASH;
                    }
                    // fall through
                    case 88:
                        break;
                    case 7: {
                        return HS_DOUBLE_QUOTES;
                    }
                    // fall through
                    case 89:
                        break;
                    case 8: {
                        return HS_UNDERSCORE;
                    }
                    // fall through
                    case 90:
                        break;
                    case 9: {
                        return HS_CON_ID;
                    }
                    // fall through
                    case 91:
                        break;
                    case 10: {
                        return HS_DECIMAL;
                    }
                    // fall through
                    case 92:
                        break;
                    case 11: {
                        return HS_DOT;
                    }
                    // fall through
                    case 93:
                        break;
                    case 12: {
                        return HS_RIGHT_BRACKET;
                    }
                    // fall through
                    case 94:
                        break;
                    case 13: {
                        return HS_QUOTE;
                    }
                    // fall through
                    case 95:
                        break;
                    case 14: {
                        return HS_EQUAL;
                    }
                    // fall through
                    case 96:
                        break;
                    case 15: {
                        return HS_AT;
                    }
                    // fall through
                    case 97:
                        break;
                    case 16: {
                        return HS_VERTICAL_BAR;
                    }
                    // fall through
                    case 98:
                        break;
                    case 17: {
                        return HS_TILDE;
                    }
                    // fall through
                    case 99:
                        break;
                    case 18: {
                        return HS_CONSYM_ID;
                    }
                    // fall through
                    case 100:
                        break;
                    case 19: {
                        return HS_COLON_COLON;
                    }
                    // fall through
                    case 101:
                        break;
                    case 20: {
                        return HS_LEFT_ARROW;
                    }
                    // fall through
                    case 102:
                        break;
                    case 21: {
                        return HS_RIGHT_ARROW;
                    }
                    // fall through
                    case 103:
                        break;
                    case 22: {
                        return HS_DOUBLE_RIGHT_ARROW;
                    }
                    // fall through
                    case 104:
                        break;
                    case 23: {
                        return HS_LEFT_PAREN;
                    }
                    // fall through
                    case 105:
                        break;
                    case 24: {
                        return HS_RIGHT_PAREN;
                    }
                    // fall through
                    case 106:
                        break;
                    case 25: {
                        return HS_COMMA;
                    }
                    // fall through
                    case 107:
                        break;
                    case 26: {
                        return HS_SEMICOLON;
                    }
                    // fall through
                    case 108:
                        break;
                    case 27: {
                        return HS_LEFT_BRACKET;
                    }
                    // fall through
                    case 109:
                        break;
                    case 28: {
                        return HS_BACKQUOTE;
                    }
                    // fall through
                    case 110:
                        break;
                    case 29: {
                        return HS_LEFT_BRACE;
                    }
                    // fall through
                    case 111:
                        break;
                    case 30: {
                        return HS_RIGHT_BRACE;
                    }
                    // fall through
                    case 112:
                        break;
                    case 31: {
                        return HS_FORALL;
                    }
                    // fall through
                    case 113:
                        break;
                    case 32: {
                    }
                    // fall through
                    case 114:
                        break;
                    case 33: {
                        return HS_HASH;
                    }
                    // fall through
                    case 115:
                        break;
                    case 34: {
                        return HS_ONE_PRAGMA;
                    }
                    // fall through
                    case 116:
                        break;
                    case 35: {
                        return HS_DASH;
                    }
                    // fall through
                    case 117:
                        break;
                    case 36: {
                        return HS_PRAGMA_SEP;
                    }
                    // fall through
                    case 118:
                        break;
                    case 37: {
                        yybegin(YYINITIAL);
                        return com.intellij.psi.TokenType.BAD_CHARACTER;
                    }
                    // fall through
                    case 119:
                        break;
                    case 38: {
                        return HS_IF;
                    }
                    // fall through
                    case 120:
                        break;
                    case 39: {
                        return HS_IN;
                    }
                    // fall through
                    case 121:
                        break;
                    case 40: {
                        return HS_DO;
                    }
                    // fall through
                    case 122:
                        break;
                    case 41: {
                        return HS_OF;
                    }
                    // fall through
                    case 123:
                        break;
                    case 42: {
                        return HS_STRING_LITERAL;
                    }
                    // fall through
                    case 124:
                        break;
                    case 43: {
                        return HS_COMMENT;
                    }
                    // fall through
                    case 125:
                        break;
                    case 44: {
                        yybegin(QQ);
                        qqDepth = 0;
                        qqStart = getTokenStart();
                    }
                    // fall through
                    case 126:
                        break;
                    case 45: {
                        yybegin(NCOMMENT);
                        commentDepth = 0;
                        commentStart = getTokenStart();
                    }
                    // fall through
                    case 127:
                        break;
                    case 46: {
                        if (commentDepth > 0) {
                            commentDepth--;
                        } else {
                            int state = yystate();
                            yybegin(YYINITIAL);
                            zzStartRead = commentStart;
                            return HS_NCOMMENT;
                        }
                    }
                    // fall through
                    case 128:
                        break;
                    case 47: {
                        commentDepth++;
                    }
                    // fall through
                    case 129:
                        break;
                    case 48: {
                        if (haddockDepth > 0) {
                            haddockDepth--;
                        } else {
                            int state = yystate();
                            yybegin(YYINITIAL);
                            zzStartRead = haddockStart;
                            return HS_NHADDOCK;
                        }
                    }
                    // fall through
                    case 130:
                        break;
                    case 49: {
                        haddockDepth++;
                    }
                    // fall through
                    case 131:
                        break;
                    case 50: {
                        if (qqDepth > 0) {
                            qqDepth--;
                        } else {
                            int state = yystate();
                            yybegin(YYINITIAL);
                            zzStartRead = qqStart;
                            return HS_QUASIQUOTE;
                        }
                    }
                    // fall through
                    case 132:
                        break;
                    case 51: {
                        qqDepth++;
                    }
                    // fall through
                    case 133:
                        break;
                    case 52: {
                        return HS_LET;
                    }
                    // fall through
                    case 134:
                        break;
                    case 53: {
                        return HS_FLOAT;
                    }
                    // fall through
                    case 135:
                        break;
                    case 54: {
                        return HS_OCTAL;
                    }
                    // fall through
                    case 136:
                        break;
                    case 55: {
                        return HS_HEXADECIMAL;
                    }
                    // fall through
                    case 137:
                        break;
                    case 56: {
                        return HS_CHARACTER_LITERAL;
                    }
                    // fall through
                    case 138:
                        break;
                    case 57: {
                        yybegin(OPTIONS_GHC);
                        return HS_PRAGMA_START;
                    }
                    // fall through
                    case 139:
                        break;
                    case 58: {
                        yybegin(NHADDOCK);
                        haddockDepth = 0;
                        haddockStart = getTokenStart();
                    }
                    // fall through
                    case 140:
                        break;
                    case 59: {
                        yybegin(YYINITIAL);
                        return HS_PRAGMA_END;
                    }
                    // fall through
                    case 141:
                        break;
                    case 60: {
                        return HS_DIRECTIVE;
                    }
                    // fall through
                    case 142:
                        break;
                    case 61: {
                        return HS_DATA;
                    }
                    // fall through
                    case 143:
                        break;
                    case 62: {
                        return HS_ELSE;
                    }
                    // fall through
                    case 144:
                        break;
                    case 63: {
                        return HS_CASE;
                    }
                    // fall through
                    case 145:
                        break;
                    case 64: {
                        return HS_TYPE;
                    }
                    // fall through
                    case 146:
                        break;
                    case 65: {
                        return HS_THEN;
                    }
                    // fall through
                    case 147:
                        break;
                    case 66: {
                        return HS_INFIX;
                    }
                    // fall through
                    case 148:
                        break;
                    case 67: {
                        return HS_CLASS;
                    }
                    // fall through
                    case 149:
                        break;
                    case 68: {
                        return HS_HADDOCK;
                    }
                    // fall through
                    case 150:
                        break;
                    case 69: {
                        return HS_WHERE;
                    }
                    // fall through
                    case 151:
                        break;
                    case 70: {
                        return HS_INFIXL;
                    }
                    // fall through
                    case 152:
                        break;
                    case 71: {
                        return HS_INFIXR;
                    }
                    // fall through
                    case 153:
                        break;
                    case 72: {
                        return HS_IMPORT;
                    }
                    // fall through
                    case 154:
                        break;
                    case 73: {
                        return HS_MODULE;
                    }
                    // fall through
                    case 155:
                        break;
                    case 74: {
                        return HS_DEFAULT;
                    }
                    // fall through
                    case 156:
                        break;
                    case 75: {
                        return HS_NEWTYPE;
                    }
                    // fall through
                    case 157:
                        break;
                    case 76: {
                        return HS_INSTANCE;
                    }
                    // fall through
                    case 158:
                        break;
                    case 77: {
                        return HS_DERIVING;
                    }
                    // fall through
                    case 159:
                        break;
                    case 78: {
                        return HS_INCLUDE_DIRECTIVE;
                    }
                    // fall through
                    case 160:
                        break;
                    case 79: {
                        return HS_TYPE_FAMILY;
                    }
                    // fall through
                    case 161:
                        break;
                    case 80: {
                        return HS_TYPE_INSTANCE;
                    }
                    // fall through
                    case 162:
                        break;
                    case 81: {
                        return HS_FOREIGN_IMPORT;
                    }
                    // fall through
                    case 163:
                        break;
                    case 82: {
                        return HS_FOREIGN_EXPORT;
                    }
                    // fall through
                    case 164:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
